package org.domino.engine.utility;import java.io.File;import java.io.IOException;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.URL;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;import java.util.Vector;import lotus.domino.Database;import lotus.domino.DateRange;import lotus.domino.DateTime;import lotus.domino.Document;import lotus.domino.DocumentCollection;import lotus.domino.EmbeddedObject;import lotus.domino.Item;import lotus.domino.Name;import lotus.domino.NotesError;import lotus.domino.NotesException;import lotus.domino.NotesFactory;import lotus.domino.RichTextItem;import lotus.domino.Session;import lotus.domino.View;import lotus.domino.ViewEntry;import lotus.domino.ViewEntryCollection;import lotus.domino.ViewNavigator;import org.domino.engine.Application;import org.domino.engine.Engine;import org.domino.engine.EngineConstants;import org.domino.engine.Helper;import org.domino.engine.database.DBHelper;import org.domino.engine.utility.file.FileHelper;import org.domino.engine.utility.log.openlog.OpenLogItem;import org.domino.engine.utility.sso.SSOHelper;import com.ibm.xsp.model.domino.wrapped.DominoDocument;public class DominoObjectHelper {	/**	 * 静态标识前缀	 */	public static final String PREFIX_STATIC_ID = "S";	/**	 * 回复文档系统域名	 */	public static final String REF_SYSTEM_FIELD_NAME = "$Ref";	/**	 * 群组成员域名	 */	public static final String GROUP_MEMBER_FIELD_NAME = "Members";	/**	 * 默认目录库路劲	 */	public static final String DEFAULT_NAME_DB_URL = "/names.nsf";	/**	 * 默认目录库文件名	 */	public static final String DEFAULT_NAME_DB_FILE_NAME = "names.nsf";	/**	 * 默认names库数据查找视图名	 */	public static final String DEFAULT_NAME_LOOKUP_VIEW_NAME = "($Users)";	/**	 * 登录参数	 */	public static final String DEFAULT_LOGIN_URL_PARAM = "?login";	/**	 * 注销参数	 */	public static final String DEFAULT_LOGOUT_URL_PARAM = "?logout";	public static final String NAME_OF_ANONYMOUS = "匿名";	/**	 * Close the DIIOP session with the Domino server.	 */	public void closeDominoSession(Session dominoSession) {		try {			dominoSession.recycle();		} catch (NotesException e) {		}	}	/**	 * Determine if a session is available with the Domino server.	 * 	 * @return True if the session is available, otherwise False.	 */	public boolean isDominoSessionAvailable(Session dominoSession) {		return dominoSession != null && dominoSession.isValid();	}	/**	 * 	 * @param session	 * @return	 */	public static String getSessionToken(Session session) {		String strSessionToken = "";		try {			if (session.isValid()) {				strSessionToken = session.getSessionToken();			}		} catch (NotesException e) {			e.printStackTrace();			try {				strSessionToken = session.getSessionToken(session						.getServerName());			} catch (NotesException e1) {				e1.printStackTrace();			}		}		return strSessionToken;	}	/**	 * 获得文档对象	 * 	 * @param session	 *            当前进程	 * @param strDatabasePath	 *            数据库路径	 * @param strUNID	 *            文档UNID	 * @return 文档对象	 */	public static Document getDocument(Session session, String strDatabasePath,			String strUNID) {		Document doc = null;		try {			Database database = session.getDatabase(session.getServerName(),					strDatabasePath);			doc = database.getDocumentByUNID(strUNID);		} catch (Exception e) {			Helper.logError(e);		}		return doc;	}	/**	 * 	 * @param db	 * @param strFormula	 * @param blCreateIndex	 * @return	 */	private static DocumentCollection getDocumentBySearch(Database db,			String strFormula, boolean blCreateIndex) {		try {			if (db.isFTIndexed()) {				if (db.getLastModified().toJavaDate()						.after(db.getLastFTIndexed().toJavaDate())) {					db.updateFTIndex(false);				}				if (Engine.isDebug()) {					Helper.logMessage("ftsearch use formula:" + strFormula);				}				return db.FTSearch(strFormula);			} else {				if (blCreateIndex) {					if (Engine.isDebug()) {						Helper.logMessage("update ft index");					}					db.updateFTIndex(true);					if (Engine.isDebug()) {						Helper.logMessage("ftsearch use formula:" + strFormula);					}					return db.FTSearch(strFormula);				} else {					if (Engine.isDebug()) {						Helper.logMessage("search use formula:" + strFormula);					}					return db.search(strFormula);				}			}		} catch (NotesException e) {			Helper.logError(e);		}		return null;	}	/**	 * 	 * @param session	 * @param db	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static Document getDocumentAndLock(Database db, String strViewName,			String strKey) throws NotesException {		Document doc = getDocumentByKey(db, strViewName, strKey);		if (doc != null) {			// 判断数据库文档锁定是否启用			if (db.isDocumentLockingEnabled()) {				// 获得锁定人				Vector holders = doc.getLockHolders();				if (holders.size() == 0) {					System.out.println("No lock holders["							+ doc.getUniversalID() + "]");				} else {					// 显示锁定人员					for (int i = 0; i < holders.size(); i++) {						System.out.println("holders:" + holders.elementAt(i));					}				}			} else {				System.out.println("Document locking not enabled["						+ db.getFileName() + "]");			}		} else {			System.out.println("文档[" + strKey + "]不存在于" + db.getFilePath()					+ "]" + " 视图[" + strViewName + "]");		}		return doc;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static Document getDocumentAndLock(Session session,			String strDBFileName, String strViewName, String strKey)			throws NotesException {		Database db = session.getDatabase(session.getServerName(),				strDBFileName);// 获得数据库		return getDocumentAndLock(db, strViewName, strKey);	}	/**	 * 	 * @param session	 * @param db	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static Document getDocumentByKey(Database db, String strViewName,			String strKey) {		Document doc = null;		View vw;		try {			vw = db.getView(strViewName);// 获得视图			vw.setAutoUpdate(false);			// 根据关键字获得文档			// Vector<String> key = new Vector<String>();			// key.add(strKey);			// doc = vw.getDocumentByKey(key);			doc = vw.getDocumentByKey(strKey, true);			if (doc != null) {			} else {				System.out.println("文档[" + strKey + "]不存在于数据库["						+ db.getFilePath() + "]" + " 视图[" + strViewName + "]");			}			vw.setAutoUpdate(true);		} catch (NotesException e) {			Helper.logError("更具标识无法获得文档[ID:" + strKey + "] [db:" + db + "]");			Helper.logError(e);		}		return doc;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static Document getDocumentByKey(Session session,			String strDBFileName, String strViewName, String strKey)			throws NotesException {		Database db = session.getDatabase(session.getServerName(),				strDBFileName);// 获得数据库		return getDocumentByKey(db, strViewName, strKey);	}	/**	 * 	 * @param session	 * @param db	 * @param strViewName	 * @param key	 * @return	 * @throws NotesException	 */	public static Document getDocumentByKey(Database db, String strViewName,			Vector<String> key) {		Document doc = null;		try {			View vw = db.getView(strViewName);// 获得视图			vw.setAutoUpdate(false);			// 根据关键字获得文档			doc = vw.getDocumentByKey(key, true);			if (doc != null) {			} else {				System.out.println("文档[" + key.toString() + "]不存在于"						+ db.getFileName() + "]" + " 视图[" + strViewName + "]");			}			vw.setAutoUpdate(true);		} catch (NotesException e) {			Helper.logError(e);		}		return doc;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param key	 * @return	 * @throws NotesException	 */	public static Document getDocumentByKey(Session session,			String strDBFileName, String strViewName, Vector<String> key)			throws NotesException {		Database db = session.getDatabase(session.getServerName(),				strDBFileName);// 获得数据库		return getDocumentByKey(db, strViewName, key);	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param key	 * @return	 * @throws NotesException	 */	public static ViewEntryCollection getAllEntriesByKey(Session session,			String strDBFileName, String strViewName, Vector<String> key) {		ViewEntryCollection vecc = null;		try {			Database db = session.getDatabase(session.getServerName(),					strDBFileName);// 获得数据库			vecc = getAllEntriesByKey(db, strViewName, key);		} catch (NotesException e) {			Helper.logError(e);		}		return vecc;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param key	 * @return	 * @throws NotesException	 */	public static ViewEntryCollection getAllEntriesByKey(Database db,			String strViewName, Vector<String> key) {		ViewEntryCollection vecc = null;		try {			View vw = db.getView(strViewName);// 获得视图			vw.setAutoUpdate(false);			// 根据关键字获得文档			vecc = vw.getAllEntriesByKey(key, true);			if (vecc != null) {			} else {				System.out.println("视图项集合[" + key.toString() + "]不存在于"						+ db.getFilePath() + "]" + " 视图[" + strViewName + "]");			}			vw.setAutoUpdate(true);		} catch (NotesException e) {			Helper.logError(e);		}		return vecc;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static ViewEntryCollection getAllEntriesByKey(Database db,			String strViewName, String strKey) {		ViewEntryCollection vecc = null;		try {			View vw = db.getView(strViewName);// 获得视图			vw.setAutoUpdate(false);			// 根据关键字获得文档			vecc = vw.getAllEntriesByKey(strKey, true);			if (vecc != null) {			} else {				System.out.println("视图项集合[" + strKey + "]不存在于"						+ db.getFileName() + "]" + " 视图[" + strViewName + "]");			}			vw.setAutoUpdate(true);		} catch (NotesException e) {			Helper.logError(e);		}		return vecc;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static ViewEntryCollection getAllEntriesByKey(Session session,			String strDBFileName, String strViewName, String strKey)			throws NotesException {		Database db = session.getDatabase(session.getServerName(),				strDBFileName);// 获得数据库		return getAllEntriesByKey(db, strViewName, strKey);	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param key	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocumentsByKey(Session session,			String strDBFileName, String strViewName, Vector<String> key)			throws NotesException {		ViewEntryCollection vecc = null;		Vector<Document> v = new Vector<Document>();		try {			Database db = session.getDatabase(session.getServerName(),					strDBFileName);// 获得数据库			v = getAllDocumentsByKey(db, strViewName, key);		} catch (NotesException e) {			Helper.logError(e);		}		return v;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param key	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocumentsByKey(Database db,			String strViewName, Vector<String> key) throws NotesException {		ViewEntryCollection vecc = null;		Vector<Document> v = new Vector<Document>();		try {			View vw = db.getView(strViewName);// 获得视图			vw.setAutoUpdate(false);			// 根据关键字获得文档			vecc = vw.getAllEntriesByKey(key, true);			if (vecc != null) {				ViewEntry tmpentry;				ViewEntry entry = vecc.getFirstEntry();				while (entry != null) {					if (entry.isDocument()) {						v.add(entry.getDocument());					}					tmpentry = vecc.getNextEntry();					entry.recycle();					entry = tmpentry;				}			} else {				System.out.println("视图项集合[" + key.toString() + "]不存在于"						+ db.getFilePath() + "]" + " 视图[" + strViewName + "]");			}			vw.setAutoUpdate(true);		} catch (NotesException e) {			Helper.logError(e);		}		return v;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocumentsByKey(Database db,			String strViewName, String strKey) {		ViewEntryCollection vecc = null;		Vector<Document> v = new Vector<Document>();		try {			View vw = db.getView(strViewName);// 获得视图			vw.setAutoUpdate(false);			// 根据关键字获得文档			vecc = vw.getAllEntriesByKey(strKey, true);			if (vecc != null) {				ViewEntry tmpentry;				ViewEntry entry = vecc.getFirstEntry();				while (entry != null) {					if (entry.isDocument()) {						v.add(entry.getDocument());					}					tmpentry = vecc.getNextEntry();					entry.recycle();					entry = tmpentry;				}			} else {				System.out.println("视图项集合[" + strKey + "]不存在于"						+ db.getFileName() + "]" + " 视图[" + strViewName + "]");			}			vw.setAutoUpdate(true);		} catch (NotesException e) {			Helper.logError(e);		}		return v;	}	/**	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocumentsByKey(Session session,			String strDBFileName, String strViewName, String strKey)			throws NotesException {		Database db = session.getDatabase(session.getServerName(),				strDBFileName);// 获得数据库		return getAllDocumentsByKey(db, strViewName, strKey);	}	/**	 * 更具关键字从视图获得文档数	 * 	 * @param session	 *            当前进程实例	 * @param strDBPath	 *            数据库地址	 * @param strViewName	 *            试图名	 * @param strKey	 *            关键字字符窜	 * @return	 */	public static int getCountByKeyFromView(Session session, String strDBPath,			String strViewName, String strKey) {		int count = 0;		try {			View view = DominoObjectHelper.getView(session, strDBPath,					strViewName);			if (Helper.ValidateNotNull(view)) {				count = view.getAllDocumentsByKey(strKey, true).getCount();			}		} catch (Exception e) {			Helper.logError(e);		}		return count;	}	/**	 * 	 * @param session	 * @param strServerName	 * @param strDBPath	 * @return	 */	public static Database getDatabase(Session session, String strServerName,			String strDBPath) {		try {			if (!Helper.ValidateNotNull(session)) {				Helper.logError("session is null when getDatabase");			}			if (!Helper.ValidateNotEmpty(strServerName)) {				strServerName = session.getServerName();			}			Database db = session.getDatabase(strServerName, strDBPath);			if (isValid(db)) {				return db;			} else {				Helper.logError("the database is not valid:" + strServerName						+ ":" + strDBPath);			}		} catch (NotesException e) {			Helper.logError("get database error:" + strServerName + ":"					+ strDBPath);		}		return null;	}	/**	 * 	 * @param session	 * @param database	 * @param strViewName	 * @return	 */	public static View getView(Database database, String strViewName)			throws NotesException {		View view = null;		if (Helper.ValidateNotNull(database)) {			view = database.getView(strViewName);			if(view == null){				if(DBHelper.createView(database, strViewName)){					view = database.getView(strViewName);				}			}		}		return view;	}	/**	 * 获得视图对象	 * 	 * @param session	 * @param strDBPath	 * @param strViewName	 * @return	 */	public static View getView(Session session, String strDBPath,			String strViewName) throws NotesException {		Database database = session.getDatabase(session.getServerName(),				strDBPath);// 获得数据库		return getView(database, strViewName);	}	/**	 * 获得视图所有视图项	 * 	 * @param session	 * @param strDBPath	 * @param strViewName	 * @return	 * @throws NotesException	 */	public static ViewEntryCollection getAllEntries(Session session,			String strDBPath, String strViewName) throws NotesException {		View vw = getView(session, strDBPath, strViewName);		return vw.getAllEntries();	}	/**	 * 	 * @param session	 * @param strDBPath	 * @param strViewName	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocuments(Session session,			String strDBPath, String strViewName) throws NotesException {		Vector<Document> vector = new Vector<Document>();		try {			View view = getView(session, strDBPath, strViewName);			ViewNavigator nav = view.createViewNav();			ViewEntry tmpentry;			ViewEntry entry = nav.getFirst();			while (entry != null) {				if (entry.isDocument()) {					vector.add(entry.getDocument());				}				tmpentry = nav.getNext();				entry.recycle();				entry = tmpentry;			}		} catch (NotesException e) {			Helper.logError(e);		}		return vector;	}	/**	 * 	 * @param session	 * @param strDBPath	 * @param strViewName	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocuments(			Database db, String strViewName) throws NotesException {		Vector<Document> vector = new Vector<Document>();		try {			View view = db.getView(strViewName);			ViewNavigator nav = view.createViewNav();			ViewEntry tmpentry;			ViewEntry entry = nav.getFirst();			while (entry != null) {				if (entry.isDocument()) {					vector.add(entry.getDocument());				}				tmpentry = nav.getNext();				entry.recycle();				entry = tmpentry;			}		} catch (NotesException e) {			org.domino.engine.Helper.logError(e);		}		return vector;	}	/**	 * 	 * @param session	 * @param db	 * @return	 * @throws NotesException	 */	public static Vector<Document> getAllDocuments(Session session, Database db)			throws NotesException {		Vector<Document> vector = new Vector<Document>();		try {			DocumentCollection docc = db.getAllDocuments();			Document tmpdoc;			Document doc = docc.getFirstDocument();			while (doc != null) {				vector.add(doc);				tmpdoc = docc.getNextDocument();				doc.recycle();				doc = tmpdoc;			}		} catch (NotesException e) {			org.domino.engine.Helper.logError(e);		}		return vector;	}	/**	 * 构造静态标识	 * 	 * @param doc	 * @return	 * @throws NotesException	 */	public static String buildStaticID(Document doc) throws NotesException {		return PREFIX_STATIC_ID + doc.getUniversalID();	}	public static boolean attachFileToRichTextItem(lotus.domino.Document doc,			String strFieldName, String strFilePath, String strFileName) {		try {			Item item = doc.getFirstItem(strFieldName);			RichTextItem body = null;			if (item == null) {				body = doc.createRichTextItem(strFieldName);			} else if (item.getType() == Item.RICHTEXT) {				body = (RichTextItem) item;			} else {				item.remove();				body = doc.createRichTextItem(strFieldName);			}			body.embedObject(EmbeddedObject.EMBED_ATTACHMENT, "", strFilePath,					strFileName);			return true;		} catch (Exception e) {			Helper.logError(e);			return false;		}	}	/*	 * 获得域值用户名简称	 */	public static String getCNFromField(Session session, Document doc,			String strFieldName) {		String strCNName = "";		try {			String strFieldValue = doc.getItemValueString(strFieldName);			try {				Name nm = session.createName(strFieldValue);				strCNName = nm.getCommon();			} catch (Exception e) {				Helper.logError(e);				strCNName = strFieldValue;			}		} catch (Exception e) {			Helper.logError(e);		}		return strCNName;	}	/**	 * 从文档域获得日期对象	 * 	 * @param doc	 * @param strFieldName	 * @return	 */	public static Date getDateFromField(Document doc, String strFieldName) {		try {			// 不再考虑多日期值			if (Helper.ValidateNotNull(doc)) {				Item item = doc.getFirstItem(strFieldName);				if (item.getType() == Item.DATETIMES) {					return item.getDateTimeValue().toJavaDate();				} else {					Date dt = new Date(item.getValueString());					return dt;				}			} else {				Helper.logError("getDateFromField:the doc is null");			}			// Vector times = doc.getItemValueDateTimeArray(strFieldName);			// for (int j = 0; j < times.size(); j++) {			// Object time = times.elementAt(j);			// if (time.getClass().getName().endsWith("DateTime")) {			// DateTime dt = (DateTime) time;			// return dt.toJavaDate();			// } else if (time.getClass().getName().endsWith("DateRange")) {			// DateTime dtStart = ((DateRange) time).getStartDateTime();			// // DateTime dtEnd = ((DateRange) time).getEndDateTime();			// return dtStart.toJavaDate();			// }			// }		} catch (Exception e) {			Helper.logError(e);		}		return null;	}	/**	 * 从文档域中获得显示用日期字符串	 * 	 * @param doc	 * @param strFieldName	 * @return	 */	public static String getDisplayDate(Document doc, String strFieldName) {		Vector times;		String strTime = "";		try {			times = doc.getItemValueDateTimeArray(strFieldName);			for (int j = 0; j < times.size(); j++) {				Object time = times.elementAt(j);				if (time.getClass().getName().endsWith("DateTime")) {					DateTime dt = (DateTime) time;					strTime += dt.getDateOnly() + " " + dt.getTimeOnly() + " ";				} else if (time.getClass().getName().endsWith("DateRange")) {					DateTime dtStart = ((DateRange) time).getStartDateTime();					DateTime dtEnd = ((DateRange) time).getEndDateTime();					strTime += dtStart.getDateOnly() + " "							+ dtStart.getTimeOnly() + " - "							+ dtEnd.getDateOnly() + " " + dtEnd.getTimeOnly()							+ " ";				}			}		} catch (NotesException e) {			Helper.logError(e);		}		return strTime;	}	/**	 * 获得视图项类型	 * 	 * @param entry	 * @return	 */	public static String getEntryType(ViewEntry entry) {		String t = null;		try {			if (entry.isCategory())				t = "category";			else if (entry.isDocument())				t = "document";			else if (entry.isTotal())				t = "total";		} catch (Exception e) {			Helper.logError(e);		}		return t;	}	/**	 * 获得视图中的文档数	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @return	 */	public static int getDocumentCount(Session session, String strDBFileName,			String strViewName) {		int n = 0;		try {			View view = getView(session, strDBFileName, strViewName);			if (view != null) {				view.setAutoUpdate(false);				ViewNavigator nav = view.createViewNav();				ViewEntry entry = nav.getFirst();				while (entry != null) {					n++;					entry = nav.getNextSibling();				}				view.setAutoUpdate(true);			} else {				Helper.logError("视图不存在:" + strViewName);			}		} catch (Exception e) {			Helper.logError(e);		}		return n;	}	/**	 * 获得视图导航对象下的子文档数	 * 	 * @param nav	 * @return	 */	public static int getChildDocumentCount(ViewNavigator nav) {		int n = 0;		try {			ViewEntry entryCurrent = nav.getCurrent();			if (entryCurrent != null) {				ViewEntry entry = nav.getChild();				if (entry != null) {					while (entry != null) {						n++;						entry = nav.getNextSibling();					}					nav.gotoEntry(entryCurrent);				}				entryCurrent.recycle();			}		} catch (Exception e) {			Helper.logError(e);		}		return n;	}	/**	 * 获得视图导航对象下的子孙文档数	 * 	 * @param nav	 * @return	 */	public static int getDescendantsDocumentCount(ViewNavigator nav) {		int n = 0;		try {			ViewEntry entryCurrent = nav.getCurrent();			if (entryCurrent != null) {				ViewEntry entry = nav.getChild();				if (entry != null) {					while (entry != null) {						n++;						getDescendantsDocumentCount(nav);						entry = nav.getNextSibling();					}					nav.gotoEntry(entryCurrent);				}				entryCurrent.recycle();			}		} catch (Exception e) {			Helper.logError(e);		}		return n;	}	/**	 * 获得用户简称	 * 	 * @return	 */	public static String getCommonNameString(Session session, String strName) {		try {			Name nm = session.createName(strName);			return nm.getCommon();		} catch (NotesException e) {			Helper.logError(e);			return strName;		}	}	/**	 * 获得用户全称	 * 	 * @return	 */	public static String getCanonicalNameString(Session session, String strName) {		try {			Name nm = session.createName(strName);			return nm.getCanonical();		} catch (NotesException e) {			Helper.logError(e);			return strName;		}	}	/**	 * 获得用户列表的简称列表	 * 	 * @param v	 * @return	 */	public static Vector getCommonName(Session session, Vector v) {		Vector vCN = new Vector();		for (Iterator i = v.iterator(); i.hasNext();) {			String strUserName = (String) i.next();			String strCommonUserName = getCommonNameString(session, strUserName);			if (!strCommonUserName.equals("")) {				vCN.add(strCommonUserName);			}		}		return vCN;	}	/**	 * 获得当前用户全称	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static String getCurrentUserName(Session session)			throws NotesException {		try {			return session.getEffectiveUserName();		} catch (Exception e) {			Helper.logError("Get Current Effective User Name Error");			return "";		}	}	/**	 * 获得当前用户对象	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static Name getCurrentUser(Session session) throws NotesException {		return session.createName(getCurrentUserName(session));	}	/**	 * 获得当前用户简称	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static String getCurrentUserCommonName(Session session)			throws NotesException {		String strCommonName = getCurrentUser(session).getCommon();		return isAnonymous(strCommonName) ? NAME_OF_ANONYMOUS : strCommonName;	}	/**	 * 判断当前用户是否是匿名用户	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static boolean isAnonymous(Session session) throws NotesException {		return isAnonymous(getCurrentUserName(session));	}	/**	 * 判断用户名是否是匿名	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static boolean isAnonymous(String strName) throws NotesException {		return (strName.equals("Anonymous"));	}	/**	 * 根据视图关键字获得某文档域值	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @param strItemName	 * @return	 * @throws NotesException	 */	public static Vector getItemValue(Session session, String strDBFileName,			String strViewName, String strKey, String strItemName)			throws NotesException {		Document doc = DominoObjectHelper.getDocumentByKey(session,				strDBFileName, strViewName, strKey);		return doc.getItemValue(strItemName);	}	/**	 * 根据视图关键字获得某文档域值字符串	 * 	 * @param session	 * @param strDBFileName	 * @param strViewName	 * @param strKey	 * @param strItemName	 * @return	 * @throws NotesException	 */	public static String getItemValueString(Session session,			String strDBFileName, String strViewName, String strKey,			String strItemName) throws NotesException {		Document doc = DominoObjectHelper.getDocumentByKey(session,				strDBFileName, strViewName, strKey);		return doc.getItemValueString(strItemName);	}	/**	 * 从names库获得文档	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static Document getDocumentFromNames(Session session, String strKey)			throws NotesException {		Document docGroup = DominoObjectHelper.getDocumentByKey(session,				DEFAULT_NAME_DB_FILE_NAME, DEFAULT_NAME_LOOKUP_VIEW_NAME,				strKey);		return docGroup;	}	/**	 * 从群组获得人员列表	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static Vector getGroupMembers(Session session, String strKey)			throws NotesException {		Document docGroup = getDocumentFromNames(session, strKey);		return docGroup.getItemValue(GROUP_MEMBER_FIELD_NAME);	}	/**	 * 组合登录链接	 * 	 * @param session	 * @return	 */	public static String buildLoginURL(Session session, String strRedirectURL) {		String strURL = DominoObjectHelper.getCurrentDBURL(session);		if (strURL.equals("")) {// 判断是否能获得当前数据库路径			strURL = DEFAULT_NAME_DB_URL + DEFAULT_LOGIN_URL_PARAM;		} else {			strURL += DEFAULT_LOGIN_URL_PARAM;		}		if (Helper.ValidateNotNull(strRedirectURL)) {			strURL += ("&redirectto=" + strRedirectURL);		}		return strURL;	}	/**	 * 组合注销链接	 * 	 * @param session	 * @return	 */	public static String buildLogoutURL(Session session, String strRedirectURL) {		String strURL = DominoObjectHelper.getCurrentDBURL(session);		if (strURL.equals("")) {// 判断是否能获得当前数据库路径			strURL = DEFAULT_NAME_DB_URL + DEFAULT_LOGOUT_URL_PARAM;		} else {			strURL += DEFAULT_LOGOUT_URL_PARAM;		}		if (Helper.ValidateNotNull(strRedirectURL)) {			strURL += ("&redirectto=" + strRedirectURL);		}		return strURL;	}	/**	 * 获得当前时间	 * 	 * @param session	 * @return	 * @throws NotesException	 */	public static DateTime getCurrentDateTime(Session session)			throws NotesException {		return session.createDateTime("");	}	/**	 * 设置域为作者域	 * 	 * @param item	 * @return	 */	public static boolean setItemAuthors(Item item) {		try {			if (item != null) {				if (item.isAuthors() == false) {					item.setAuthors(true);				}			}		} catch (NotesException e) {			Helper.logError(e);			return false;		}		return true;	}	/**	 * 设置域为读者域	 * 	 * @param item	 * @return	 */	public static boolean setItemReaders(Item item) {		try {			if (item != null) {				if (item.isReaders() == false) {					item.setReaders(true);				}			}		} catch (NotesException e) {			Helper.logError(e);			return false;		}		return true;	}	/**	 * 设置域为姓名域	 * 	 * @param item	 * @return	 */	public static boolean setItemNames(Item item) {		try {			if (item != null) {				if (item.isNames() == false) {					item.setNames(true);				}			}		} catch (NotesException e) {			Helper.logError(e);			return false;		}		return true;	}	/**	 * 设置域为作者域	 * 	 * @param item	 * @return	 */	public static boolean setFieldAuthors(Document doc, String strFieldName) {		try {			Item item = doc.getFirstItem(strFieldName);			return setItemAuthors(item);		} catch (NotesException e) {			Helper.logError(e);			return false;		}	}	/**	 * 设置域为读者域	 * 	 * @param item	 * @return	 */	public static boolean setFieldReaders(Document doc, String strFieldName) {		try {			Item item = doc.getFirstItem(strFieldName);			return setItemReaders(item);		} catch (NotesException e) {			Helper.logError(e);			return false;		}	}	/**	 * 设置域为姓名域	 * 	 * @param item	 * @return	 */	public static boolean setFieldNames(Document doc, String strFieldName) {		try {			Item item = doc.getFirstItem(strFieldName);			return setItemNames(item);		} catch (NotesException e) {			Helper.logError(e);			return false;		}	}	/**	 * 	 * @param strName	 * @return	 */	public static String getEnvironmentString(String strName) {		try {			return Engine.getSessionAsSignerWithFullAccess()					.getEnvironmentString(strName, true);		} catch (NotesException e) {			Helper.logError(e);			return "";		}	}	/**	 * 	 * @return	 */	public static String getDominoHTMLPath() {		return getEnvironmentString("Directory") + "\\domino\\html\\";	}	/**	 * 	 * @return	 */	public static String getDominoHTMLPathByDocument(Document doc) {		String strID = "";		try {			if (doc.hasItem("$ID")) {				strID = doc.getItemValueString("$ID");			} else {				strID = doc.getUniversalID();			}		} catch (NotesException e) {			e.printStackTrace();		}		String strPath = getEnvironmentString("Directory") + "\\domino\\html\\"				+ EngineConstants.DIRECTORY_NAME_FOR_DOMINO_TMP_USE + "\\"				+ strID + "\\";		FileHelper.checkFolder(strPath, true);		return strPath;	}	/**	 * 	 * @return	 */	public static String getDominoHTMLURLByDocument(Document doc) {		String strID = "";		try {			if (doc.hasItem("$ID")) {				strID = doc.getItemValueString("$ID");			} else {				strID = doc.getUniversalID();			}		} catch (NotesException e) {			Helper.logError(e);		}		return "/" + EngineConstants.DIRECTORY_NAME_FOR_DOMINO_TMP_USE + "/"				+ strID + "/";	}	/**	 * 判断文件是否比文档新	 * 	 * @param doc	 * @param file	 * @return	 * @throws NotesException	 */	public static boolean isNew(File file, Document doc) throws NotesException {		return FileHelper.getModifyDate(file).after(getModifyDate(doc));	}	/**	 * 判断文件是否比文档集新	 * 	 * @param doc	 * @param file	 * @return	 * @throws NotesException	 */	public static boolean isNew(Vector<Document> v, File file)			throws NotesException {		Date dt = getModifyDate(v);		if (dt == null) {			return true;		} else {			return FileHelper.getModifyDate(file).after(getModifyDate(v));		}	}	/**	 * 判断文件是否比视图项新	 * 	 * @param v	 * @param file	 * @return	 * @throws NotesException	 */	public static boolean isNew(ViewEntryCollection vec, File file)			throws NotesException {		Date dt = getModifyDate(vec);		if (dt == null) {			return true;		} else {			return FileHelper.getModifyDate(file).after(getModifyDate(vec));		}	}	/**	 * 获得文档修改时间	 * 	 * @param doc	 * @return	 * @throws NotesException	 */	public static Date getModifyDate(Document doc) throws NotesException {		return doc.getLastModified().toJavaDate();	}	/**	 * 获得文档集最后修改时间	 * 	 * @param doc	 * @return	 * @throws NotesException	 */	public static Date getModifyDate(Vector<Document> v) throws NotesException {		Date dtResult = null;		for (Iterator i = v.iterator(); i.hasNext();) {			Document doc = (Document) i.next();			Date dtDoc = doc.getLastModified().toJavaDate();			if (dtResult == null) {				dtResult = dtDoc;			} else if (dtDoc.after(dtResult)) {				dtResult = dtDoc;			}		}		return dtResult;	}	/**	 * 获得视图项最后修改时间	 * 	 * @param v	 * @return	 * @throws NotesException	 */	public static Date getModifyDate(ViewEntryCollection vec)			throws NotesException {		Date dtResult = null;		ViewEntry tmpentry;		ViewEntry entry = vec.getFirstEntry();		while (entry != null) {			if (entry.isDocument()) {				Document doc = entry.getDocument();				Date dtDoc = doc.getLastModified().toJavaDate();				if (dtResult == null) {					dtResult = dtDoc;				} else if (dtDoc.after(dtResult)) {					dtResult = dtDoc;				}			}			tmpentry = vec.getNextEntry();			entry.recycle();			entry = tmpentry;		}		return dtResult;	}	/**	 * 	 * @param userName	 * @param password	 * @return	 */	public static String getDomAuthSessId(String strURL, String userName,			String password) {		String strDomAuthSessId = "";		if (!Helper.ValidateNotEmpty(password)) {			password = Application.getDefaultPassword();		}		try {			URL url = new URL(strURL);			if (Engine.isDebug()) {				Helper.logMessage("URL" + strURL);			}			HttpURLConnection.setFollowRedirects(false);			HttpURLConnection urlConnection = (HttpURLConnection) url					.openConnection();			urlConnection.setDoOutput(true);			OutputStreamWriter wr = new OutputStreamWriter(					urlConnection.getOutputStream());			wr.write("username=" + userName + "&password=" + password);			wr.flush();			wr.close();			urlConnection.connect();			if (Engine.isDebug()) {				Helper.logMessage("ResponseMessage:"						+ urlConnection.getResponseMessage());				Helper.logMessage("ResponseCode:"						+ urlConnection.getResponseCode());			}			for (Iterator<String> it = urlConnection.getHeaderFields().keySet()					.iterator(); it.hasNext();) {				String key = it.next();				if (key != null && key.equals("Set-Cookie")) {					String value = urlConnection.getHeaderField(key);					if (Engine.isDebug()) {						Helper.logMessage("Set-Cookie:" + value);					}					String[] cookies = value.split(";\\s*");					for (int i = 0; i < cookies.length; i++) {						String[] cookie = cookies[i].trim().split("=");						if (cookie[0].equals("DomAuthSessId")) {							strDomAuthSessId = cookie[1];							if (Engine.isDebug()) {								Helper.logMessage("DomAuthSessId:"										+ strDomAuthSessId);							}							break;						}					}				}			}			urlConnection.disconnect();		} catch (IOException e) {			Helper.logError(e);		}		return strDomAuthSessId;	}	/**	 * get the URL by file name	 * 	 * @param fileName	 * @return	 */	public static String getURLByFileName(Session session, String fileName) {		return Helper.getURLByFilePath(getPathByFileName(session, fileName));	}	/*	 * get the file path by file name	 */	public static String getPathByFileName(Session session, String fileName) {		if (Helper.ValidateNotEmpty(fileName)) {			return getCurrentFolderPath(session) + fileName;		} else {			return getCurrentDBFilePath(session);		}	}	/*	 * Get the current db file name("file.nsf")	 */	public static String getCurrentDBFileName(Session session) {		try {			Database dbCurrent = null;			try {				dbCurrent = session.getCurrentDatabase();			} catch (NotesException e) {				Helper.logError("current db object is not exist");			}			if (isValid(dbCurrent)) {				return dbCurrent.getFileName();			}		} catch (Exception e) {			e.printStackTrace();		}		return "";	}	/**	 * Get the current db url("/folder/file.nsf")	 * 	 * @param session	 * @return	 */	public static String getCurrentDBURL(Session session) {		return Helper.getURLByFilePath(getCurrentDBFilePath(session));	}	/**	 * Get the current db path("folder\file.nsf")	 * 	 * @param session	 * @return	 */	public static String getCurrentDBFilePath(Session session) {		Database dbCurrent = null;		try {			try {				dbCurrent = session.getCurrentDatabase();			} catch (NotesException e) {				Helper.logError("current db object is not exist");			}			if (Helper.ValidateNotNull(dbCurrent) && dbCurrent.isOpen()) {				return dbCurrent.getFilePath();			}		} catch (NotesException e) {			e.printStackTrace();		}		return "";	}	/**	 * Get the current folder url exclude db file name("/folder/")	 * 	 * @param session	 * @return	 */	public static String getCurrentFolderURL(Session session) {		return Helper.getURLByFilePath(getCurrentFolderPath(session));		// return		// getCurrentDBURL(session).replace(getCurrentDBFileName(session),		// "");	}	/**	 * Get the current folder path exclude db file name("folder\")	 * 	 * @param session	 * @return	 */	public static String getCurrentFolderPath(Session session) {		return getCurrentDBFilePath(session).replace(				getCurrentDBFileName(session), "");	}	/**	 * Get the current folder url exclude db file name("/folder/plugins/")	 * 	 * @param session	 * @return	 */	public static String getPluginsFolderURL(Session session) {		return getCurrentFolderURL(session) + "plugins/";	}	/**	 * Get the current folder path exclude db file name("folder\plugins\")	 * 	 * @param session	 * @return	 */	public static String getPluginsFolderPath(Session session) {		return getCurrentFolderPath(session) + "plugins\\";	}	/**	 * 获得当前数据库资源路径	 * @return	 */	public static String getResourceBaseURL(Session session) {		return getCurrentDBURL(session) + "/";	}	/**	 * 判断数据库对象是否有效（数据库是否存在、是否已打开）	 * @param db	 * @return	 */	public static boolean isValid(Database db) {		if (Helper.ValidateNotNull(db)) {			try {				return db.isOpen();			} catch (NotesException e) {				Helper.logError("the db open error");			}		}		return false;	}	/**	 * 记录日记至数据库	 * TODO 实现	 */	public static void logMessage(Object o) {		Session session = Engine.getSession();		if (Helper.ValidateNotNull(session)) {			try {				Helper.logMessage(session.getCurrentDatabase().getFilePath() + "|"						+ o);			} catch (Exception e) {				Helper.logMessage(o);			}		} else {			Helper.logMessage(o);		}	}}