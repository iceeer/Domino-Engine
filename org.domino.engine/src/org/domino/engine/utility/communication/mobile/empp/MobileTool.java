package org.domino.engine.utility.communication.mobile.empp;/* * 创建日期 2005-12-14 * */import java.io.IOException;import org.domino.engine.Engine;import com.wondertek.esmp.esms.empp.EMPPConnectResp;import com.wondertek.esmp.esms.empp.EmppApi;import com.wondertek.esmp.esms.empp.exception.EMPPObjectException;import com.wondertek.esmp.esms.empp.exception.HeaderIncompleteException;import com.wondertek.esmp.esms.empp.exception.InvalidEMPPObjectException;import com.wondertek.esmp.esms.empp.exception.MessageIncompleteException;import com.wondertek.esmp.esms.empp.exception.NotEnoughDataInByteBufferException;import com.wondertek.esmp.esms.empp.exception.UnknownCommandIdException;import com.wondertek.esmp.esms.empp.exception.ValueNotSetException;/** * @author Jeffery *  */public class MobileTool {	EmppApi emppApi = new EmppApi();	public MobileTool() {		sys_host = Engine.getProperty("empp.host");		sys_port = Integer.parseInt(Engine.getProperty("empp.port"));		sys_accountId = Engine.getProperty("empp.account");		sys_password = Engine.getProperty("empp.password");		sys_serviceId = Engine.getProperty("empp.user");		RecvListener listener = new RecvListener(emppApi);		try {			// 建立同服务器的连接			EMPPConnectResp response = emppApi.connect(sys_host, sys_port,					sys_accountId, sys_password, listener);			System.out.println(response);			if (response == null) {				System.out.println("连接超时失败");				// returnValue = 1; // 网络或者其他原因导致连接失败			}			if (!emppApi.isConnected()) {				System.out.println("连接失败:响应包状态位=" + response.getStatus());				// returnValue = 2; // 用户名等信息不对导致连接失败			}		} catch (Exception e) {			System.out.println("发生异常，导致连接失败");			e.printStackTrace();			// returnValue = 3; // 异常导致连接失败		}	}	String sys_host, sys_accountId, sys_password, sys_serviceId;	int sys_port;	long timeout = 10;	public int sendShortMessage(String phoneNumber, String content) {		int returnValue = 0;		try {			// 发送短信			if (emppApi.isSubmitable() & returnValue == 0) {				// 简单方式发送短信,支持长短信				try {					emppApi.submitMsgAsync(Encode(content),							new String[] { phoneNumber }, sys_serviceId);					returnValue = 9; // 正常发送				} catch (Exception e1) {					e1.printStackTrace();					returnValue = 3; // 未知原因				}			}		} catch (Exception e) {			e.printStackTrace();		} finally {		}		return returnValue;	}	public int receiveShortMessage() {						return 0;	}	public void outInformation(String t1, String t2) {		System.out.println(t1);		System.out.println(Encode(t2));	}	public String Encode(String s) {		try {			return new String(s.getBytes(), "gb2312");		} catch (Exception e) {			return s;		}	}	public void recyle() {		emppApi.stopWorkThread();		try {			emppApi.terminateAsync();		} catch (MessageIncompleteException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (UnknownCommandIdException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (InvalidEMPPObjectException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ValueNotSetException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (NotEnoughDataInByteBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (HeaderIncompleteException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (EMPPObjectException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}catch (Exception e) {			e.printStackTrace();		}	}		/**	 * 	 * @return	 */	public int getVersion(){		return emppApi.getVersion();	}}